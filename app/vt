#!/usr/bin/env ruby

require "colorize"
require "fileutils"
require "./app/lib/location.rb"
require "./app/lib/wiki.rb"
require "./app/lib/args.rb"
require "./app/lib/resource/base.rb"
require "./app/lib/resource/image.rb"
require "./app/lib/url.rb"

#
# Interface Segregatin Principle: 
#  this is the class which used to be boilerplate and going to
#  be refactored from. the classes under app/lib/**/* are 
#  ENCAPSULATED classes for the ISP realization.
#  it is on the way.
#
class Main
  attr_reader :option

  def initialize(args)
    @args     = Args.new(args)
    @location = Location.new
    @wiki     = Wiki.new(@location)
    @resource = Resource::Base.new(resources: @args.values)
    @option   = @args.options.first
    @original_articles  = @wiki.original_articles
    @formatted_articles = @wiki.formatted_articles
  end

  def execute
    case @option
    when "-i"
      @resource.attach
    when "-u"  
      @wiki.save
    when "-g"
      Wiki.new.grep
    when "-n"  
      @wiki.create(@args.values) 
    else
      enlist(@original_articles, @formatted_articles, nil)
    end
  end    

  def text_matches_pattern?(file, regex)
    match?(Wiki.read(file), regex)
  end

    
  def config
    confs = File.open(@location.config, "r").map do |line|
      line.split(" ")
    end.flatten
    Hash[*confs]
  end

  #
  # XXX needs to be refactored later
  # 
  def main_op(files, prev_files, args)
    input = Terminal.new.string
    if /^[c\s]+/ =~ input
      read_chapters(input, files)
    elsif /^[+\s]+/ =~ input # former pb
    elsif /^[l\s]+/ =~ input
      URL.new(files).show
    elsif /^[g\s]+/ =~ input
      files = Wiki.new(args: input[1..-1]).grep
      args = []
    elsif /^[u\s]+$/ =~ input
      update_git_repository
    elsif /^[w\s]+$/ =~ input
      open_url(input, files)
    elsif /^q\s*$/ =~ input
      abort
    elsif /^[\/]/ =~ input
      files = []; args  = input[1..-1].split(" ")
    elsif /^[v]+\s*$/ =~ input
      @wiki.edit(files, input.strip.size)
    elsif /^[v]+\s*\d+$/ =~ input
      @wiki.edit(files, input.gsub("v", "").strip.to_i)
    elsif /^[a\s]+$/ =~ input
      files = []; args  = []
    elsif /^[p\s]+$/ =~ input  
      files = prev_files
    elsif /^[\d\s]+$/ =~ input
      files = [files[input.to_i - 1]]
    elsif /^[\,\s]+$/ =~ input 
      files = [files[input.size - 1]]
    elsif /^y[\s]*/ =~ input
      files.each do |file|
        mutual_link(file, input.gsub("y", "").strip.split(" "))
      end  
    elsif /^\w+$/ =~ input
      args = input.split(" ")
    elsif input.include?("n ")  
      @wiki.create(input[2..-1])
    end 
    [files, prev_files, args]
  end

  #
  # XXX needs to be refactored later
  # 
  def enlist(files, prev_files, args)
    files = files.size == 0 ? @original_articles : files
    files = files.select { |file| match?(file, args) }
    Terminal.new(message: File.basename(file), key_words: args).paint.puts.list(files)
    files, prev_files, args = main_op(files, prev_files, args)
    enlist(files, prev_files, args)
  end
end

Main.new(ARGV).execute


