#!/usr/bin/env ruby

require "colorize"

def raw
  "#{etc}/vol/raw"
end

def pages
  "#{etc}/vol/pages"
end

def etc
 "/usr/local/etc"
end

def dont_have(text)
  args_negations.select {|neg| text.include?(neg) }.size == 0
end

def md_files_all
  files_all
  .select { |file| /\.md/ =~ file }
end

def text_matches_pattern?(file, regex)
  match?(file_read(file))
end

def base_name(file)
  file.gsub("#{raw}/", "").gsub(".md", "")
end

def show_match_details(file, regex)
  puts "[file] " + base_name(file) 
  file_read_lines(file).each do |line|
    !(regex =~ line) || puts("... #{paint(line, args_values)} ...\n")
  end  
end

def regex(args = nil)
  Regexp.new((args || args_values).join(".+"))
end

def grep
  _regex = regex
  puts "regex: #{_regex}".yellow
  md_files_all
    .select { |file| text_matches_pattern?(file, _regex) }
    .each   { |file| show_match_details(file, _regex)    }
end

def args_negations
  ARGV.select{|a| /^[\^]/ =~ a }.map{|a| a[1..-1]}
end

def args_options
  ARGV.select{|a| /^\-[^\^]+$/ =~ a }
end

def args_values
  ARGV.select{|a| /^[^\-\^]/ =~ a }
end

def files_all
  Dir["#{raw}/*"]
end

def file_read(file)
  File.read(file) 
end

def file_read_lines(file)
  File.read(file).split("\n") 
end

def paint(text, key_words = nil)
  (key_words || args_values).each do |key_word|
    text = text.gsub(key_word, key_word.green)
  end
  text
end

def links(file)
  file_read_lines(file).select { |line|
    /^[\s\-]+\[[^\[\]]*\]\([^\(\)]+\)/ =~ line || /http[s]*:\/\// =~ line
  }
end

def match?(text, args = nil)
  regex(args) =~ text && dont_have(text)
end

def ask_input(msg = "[,{@}pa/v]> ")
  print msg
  $stdin.gets.chomp
end

def get_files(files)
  files.size == 0 ? md_files_all : files
end

def vim(files, size)
  size = 0 unless size < files.size
  system "vim #{files[size - 1]}"
end

def enlist(files, prev_files, args)
  files = get_files(files).select { |file| match?(file, args) }
  files.each_with_index { |file, i|
    print "[#{i+1}] "
    puts paint(base_name(file), args)
  }

  input = ask_input
  
  if /^q+\s*$/ =~ input
    abort
  elsif /^[\/]/ =~ input
    files = []
    args  = input[1..-1].split(" ")
  elsif /^[v]+\s*$/ =~ input
    vim(files, input.strip.size)
  elsif /^[v]+\s*\d+$/ =~ input
    vim(files, input.gsub("v", "").strip.to_i)
  elsif /^[a\s]+$/ =~ input
    files = []
    args  = []
  elsif /^[p\s]+$/ =~ input  
    files = prev_files
  elsif /^[\d\s]+$/ =~ input
    files = [files[input.to_i - 1]]
  elsif /^[\,\s]+$/ =~ input 
    files = [files[input.size - 1]]
  elsif /^\w+$/ =~ input
    args = input.split(" ")
  end  
  enlist(files, prev_files, args)
end

option = args_options.first

case option
when "-g"
  grep
else
  enlist(md_files_all, md_files_all, nil)
end
