#!/usr/bin/env ruby

require "colorize"
require "/usr/local/lib/vol/util.rb"

APP_NAME     = "vol"
ROOT         = "/usr/local/etc/#{APP_NAME}"
DOC_SHELF    = "/usr/local/etc/#{APP_NAME}/raw"
DOC_SHELF_P  = "/usr/local/etc/#{APP_NAME}/pages"

args = ARGV

def md_image_link(line, root, shelf)
  tokens = line.split("](")
  ("!" + tokens[0].chomp + "](" + tokens[1..-1].join.gsub(root, ""))
    .gsub(shelf + "/", "").gsub("!!","!")
end

def pict_link?(line)
 Lib::Util.image_link?(line) && !line.include?("http")
end

def convert(file)
  rewrite(
    file:  file,
    lines: File.open(file, "r").map do |line|
             pict_link?(line) ? md_image_link(line, ROOT, DOC_SHELF) : line
           end
  )
end

def rewrite(file:, lines:)
  def trim_local_urls(line)
    line.gsub(DOC_SHELF + "/", "")
        .gsub(DOC_SHELF_P + "/", "")
        .gsub(ROOT + "/", "")
  end
  f = File.open(File.join(DOC_SHELF_P, File.basename(file)), "w")
  lines.compact.each do |line|
    f.puts trim_local_urls(line)
  end
  f.close
end

def config
  confs = File.open("#{ROOT}/.config", "r").map do |line|
    line.split(" ")
  end.flatten
  Hash[*confs]
end

def bring(name, file_name)
  another_page =
    get_file(all_files, Lib::Util.ask("page:").split(" "))
  another_page_path = File.join(DOC_SHELF, another_page)  
  unless File.exist?(another_page_path)
    system "touch #{another_page_path}"                
  end
  Lib::Util.push_as_link(DOC_SHELF, another_page, name) 
  another_page
end

def push(name, file_name, dest = nil)
  dest ||= get_file(all_files, Lib::Util.ask("dest:").split(" "))
  dest_file = File.join(DOC_SHELF, dest + ".md")
  unless File.exist?(dest_file)
    system "touch #{dest_file}"                
  end
  Lib::Util.push_as_link(DOC_SHELF, name, dest) 
end

def read_scr(lines, page)
  return if lines.size == page
  chunk = lines[page]
  puts chunk.join.green
  opt = Lib::Util.ask("[Next: Enter, Previous: p]".cyan)
  if opt == "p"
    read_scr(lines, page == 0 ? 0 : page-1)
  else
    read_scr(lines, page+1)
  end
end

def edit(file_name)
   name = File.basename(file_name).gsub('.md','')
   puts
   print "[New:] ".magenta unless File.exist?(file_name)
   puts "#{name.green}\n\n"
   print "[m: markup, v: vim, l: links sc: scroll]\n" + 
         "[c: cat /: search h: head d: delete]\n" +
         "[w: web u:update + open uu: update]\n" +
         "[p: push to another page]\n" + 
         "[b: bring another page]\n" + 
         "[pb: mutual links]" + 
         "[mv: rename]\n" + 
         "[which?] "
         
   opts = $stdin.gets.chomp.split(" ")
   opt = opts[0]
   case opt
   when "h"
     puts "\n=============== head =================".green
     system "head #{file_name}"
     puts "=========================================".green
     puts 
   when "mv"
     new_name = Lib::Util.ask("new name:")
     dest = File.join(DOC_SHELF, new_name) + ".md"
     system "mv #{file_name} #{dest}"
     system "rm #{File.join(DOC_SHELF_P, File.basename(file_name))}"
     edit(dest)
   when "sc"
     lines = File.open(file_name, "r")
       .to_a
       .select{|line| line.strip.chomp != "" }
       .each_slice(10)
       .to_a

     read_scr(lines, 0)  
   when "bp", "pb"  
     push(name, file_name, bring(name, file_name))
   when "b"  
     bring(name, file_name)
   when "p"
     push(name, file_name)
   when "u"
     update_wiki
     url = config["url"].gsub("$", name)
     system "open #{url}"
   when "uu"  
     update_wiki
   when "w"
     url = config["url"].gsub("$", name)
     system "open #{url}"
   when "c"
     system "cat #{file_name}"
   when "d"  
     system "rm #{file_name}"
     puts "REMOVED: #{file_name}".red
   when "v"
     system "vim #{file_name}"
   when "l"
     links(file_name, opts[1..-1]) || edit(file_name)
   when "q"  
     abort
   when "m"  
     system "macdown #{file_name}"
   else
     if (opt || "").start_with?("/")
      opt = opt.gsub("/", "")
      unless opt
        print "[term:] "
        opt = $stdin.gets.chomp
      end  
      opt = opt.split(" ")
      edit("#{DOC_SHELF}/#{get_file(all_files, opt)}.md")
       system "macdown #{file_name}"
     end  
   end
   edit file_name
end

def key_words
  ARGV.select { |arg| !Lib::Util::option?(arg) }
end

def options
  ARGV.select { |arg| Lib::Util::option?(arg) }
end

def get_file(files, key_words, option=nil)
  files = Lib::Util.get_files(files, key_words)
  return key_words.join("_") if files.size == 0
  return files.first         if files.size == 1
  Lib::Util.show files
  option ||= Lib::Util.ask("index|keywords")
  Lib::Util.num?(option) ? files[option.to_i] : get_file(files, option.split(" "))
end

def links_sub(links)
  opt = 0
  if links.size == 0
    puts "\nno links\n".red
    return
  end
  if links.size > 1
    puts
    links.each_with_index do |link, i|
      parses = Lib::Util.parse_link(link)
      title = parses[0].cyan
      title ||= /http[\w]*/.match(link).to_s.cyan
      if title == "" || title.nil?
        puts "[#{i.to_s.magenta}] #{Lib::Util.http(link)}"
      else
        puts "[#{i.to_s.magenta}] #{title}"
      end  
    end
    opt = Lib::Util.ask_no_abort("which? none:q")
    if !opt
      return false
    end
    unless Lib::Util.num?(opt)
      return links_sub(links.select{|link| link.downcase.include?(opt) })
    end
  end

  # link = parse_link(links[opt.to_i])
  link ||= links[opt.to_i]
end

def links(file, particles)
  links = File.open(file, "r").select do |link|
    Lib::Util.http(link) || Lib::Util.is_link?(link) 
  end
  if particles.size > 0
    links = links.select{ |link| Lib::Util.include_all?(link, particles) }
  end  
  link = links_sub(links)
  return false unless link 
  http = Lib::Util.http(link)
  if http
    puts "calling... #{http}"
    system "open #{http}"
  elsif Lib::Util.is_link?(link)
    if Lib::Util.nasty_format?(link)
      system "open #{Lib::Util.parse_link(link)[1]}"
    end
    if Lib::Util.vim_prone_format?(link)
      system "vim #{Lib::Util.parse_link(link)[1]}"
    end

    if Lib::Util.markdown_link_format?(link)
       link = Lib::Util.remove_markdown(link)      
    end
    target = "#{DOC_SHELF}/#{File.basename((link || "").gsub('.md', '')).chomp}.md"
    if File.exist?(target)
      edit target
    else
      puts "\ninvalid link: #{target}\n\n"
    end
  end
end

def all_files
  Dir["#{DOC_SHELF}/*"].map{|file| File.basename(file).gsub(".md","")}
end

def mkdir_docshelfs
  system "mkdir -p #{DOC_SHELF}/images"
  system "mkdir -p #{DOC_SHELF_P}/images"
end

def image_path(root, name, extension)
  "#{root}/images/#{name}.#{extension}".gsub("//","/")
end

def fit(path)
  path.gsub(" ", "\\ ")
end

def extract_files(files)
  files.select{|file| File.exist?(file)}
end

def stop(message, cond)
  abort message if cond
end

def inter(message)
  print message
  $stdin.gets.chomp
end

def set_image
  t = Time.now
  name = "#{t.year}#{t.month}#{t.day}#{t.to_f.to_i}"
  files = extract_files(key_words)
  stop "you need image file.", files.size == 0
  file = fit(files.first)
  ARGV.delete(file)
  extension = file.split(".").last

  mkdir_docshelfs 

  target  = fit(image_path(DOC_SHELF_P, name, extension))

  def validate_file(file)
    unless File.exist?(file)
      abort "FILE ABSENT: #{file}".red
    end
  end

  Lib::Util.copy file, target

  validate_file target
  fin_dest = fit(image_path(DOC_SHELF, name, extension))

  Lib::Util.copy target, fin_dest

  validate_file fin_dest

  markdown = "![image](#{target})"
  system("echo \"#{markdown}\" | pbcopy")
  puts "\n#{markdown}\n\n"
end  

def update_wiki
  do_convert
  system "cd #{ROOT};git add #{ROOT};git commit -m \"page updated\";git push origin master"
end

def files(dir)
  Dir["#{dir}/*"]
end

def do_convert
  files(DOC_SHELF).each do |file|
    convert(file) if File.file?(file)
  end
end

case options.first
when "-u"
  update_wiki
when "-h", "--help"
  puts
  puts "#{APP_NAME} -n [word] ... make new article"
  puts "#{APP_NAME} [word]    ... edit article"
  puts "#{APP_NAME} -d [word] ... remove article"
  puts "#{APP_NAME} -c        ... convert"
  puts "#{APP_NAME} -g        ... grep"
  puts "#{APP_NAME} -u        ... update web page"
  puts "#{APP_NAME} -i [image file path] ... add image rsc and markdown to the clipboard"
  puts "#{APP_NAME} --replace [from] [to] ... replace [from] [to]"
  puts
when "--replace"
  #
  # might be okay.
  # test would be needed.
  #
  abort "there has to be [from] and [to] parameters" if key_words.size < 2
  from = key_words[0]
  abort "[from] missing." unless from
  to   = key_words[1]
  Dir["#{DOC_SHELF}/*"].each do |file|
    unless File.directory?(file)
      replaced_content = File.read(file).gsub(from , to.cyan)
      f = File.open(file, "w")
      f.puts replaced_content
      f.close
    end  
  end
when "-d" 
  term = get_file(all_files, key_words)
  print "okay to delete [#{term}] ? [Y/n]: "
  system("rm #{DOC_SHELF}/#{term}.md") if $stdin.gets.chomp.downcase == "y"
when "-i" # image
  set_image
when "-c"  
  do_convert
when "-g"  
  Dir["#{DOC_SHELF}/*"].select do |file|
    unless File.directory?(file)
      Lib::Util.include_all?(File.read(file), key_words)
    end  
  end.each do |file|
    puts "[" + File.basename(file).gsub(".md", "").cyan + "]"
  end
else
  system("mkdir -p #{DOC_SHELF}") unless File.directory?(DOC_SHELF)
  file_name = "#{DOC_SHELF}/#{key_words.join('_')}.md"
  if options.include?("-n") || File.exist?(file_name)
    edit(file_name)
  else
    edit "#{DOC_SHELF}/#{get_file(all_files, key_words)}.md"
  end  
end




