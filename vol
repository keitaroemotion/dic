#!/usr/bin/env ruby

require "colorize"
require "/usr/local/lib/vol/util.rb"

APP_NAME     = "vol"
ROOT         = "/usr/local/etc/#{APP_NAME}"
DOC_SHELF    = "/usr/local/etc/#{APP_NAME}/raw"
DOC_SHELF_P  = "/usr/local/etc/#{APP_NAME}/pages"

args = ARGV

#
# TODO: refactor this boilerplate
#
def convert(file)
  lines = File.open(file, "r").map do |line|
    if (image_link?(line) && !line.include?("http")) 
      tokens = line.split("](")
      line = "!" + tokens[0].chomp + "](" + tokens[1..-1].join.gsub(ROOT, "")
      line.gsub(DOC_SHELF + "/", "").gsub("!!","!")
    elsif image_link_2?(line)   
      url = File.dirname(config["url"]) + "/"
      litok = line
        .gsub(url, "")
        .gsub("<img src=", "![](")
        .split(" ")
      cont = (litok[1] || "").gsub("=", "=\"").gsub(">", "") + "\""
      cont = cont ? "{:#{cont}}" : ""
      line = litok[0] + ")" + cont
      line.gsub(DOC_SHELF + "/", "")
    else  
      puts line.green if line.include?("ccf")
      line
    end
  end
  f = File.open(File.join(DOC_SHELF_P, File.basename(file)), "w")
  lines.compact.each do |line|
    line = line.gsub(DOC_SHELF + "/", "")
    f.puts line
  end
  f.close
end

def config
  confs = File.open("#{ROOT}/.config", "r").map do |line|
    line.split(" ")
  end.flatten
  Hash[*confs]
end

def edit(file_name)
   name = File.basename(file_name).gsub('.md','')
   puts
   print "[New:] ".magenta unless File.exist?(file_name)
   puts "#{name.green}\n\n"
   print "[m: markup, v: vim, l: links]\n" + 
         "[c: cat /: search]\n" +
         "[w: web u:update + open uu: update]\n" +
         "[which?] "
         
   opt = $stdin.gets.chomp
   case opt
   when "u"
     update_wiki
     url = config["url"].gsub("$", name)
     system "open #{url}"
   when "uu"  
     update_wiki
   when "w"
     url = config["url"].gsub("$", name)
     system "open #{url}"
   when "c"
     system "cat #{file_name}"
   when "v"
     system "vim #{file_name}"
   when "l"
     links file_name
   when "q"  
     abort
   when "m"  
     system "macdown #{file_name}"
   else
     if opt.start_with?("/")
      opt = opt.gsub("/", "")
      unless opt
        print "[term:] "
        opt = $stdin.gets.chomp
      end  
      opt = opt.split(" ")
      edit("#{DOC_SHELF}/#{show_and_get_file(all_files, opt)}.md")
       system "macdown #{file_name}"
     end  
   end
   edit file_name
end

def key_words
  ARGV.select { |arg| !Lib::Util::option?(arg) }
end

def options
  ARGV.select { |arg| Lib::Util::option?(arg) }
end

def files_contains_keywords(files, key_words)
  files.select do |file|
    key_words.select{|kw| Lib::Util::match?(kw, file) }.size == key_words.size
  end
end

def num?(num)
  num =~ /\A[-+]?[0-9]*\.?[0-9]+\Z/
end

def get_files(files, key_words)
  (files.size == 0 ? all_files : files_contains_keywords(files, key_words))
    .uniq
    .select{|x| x != "images"}
end

def show_and_get_file(files, key_words, option=nil)
  files = get_files(files, key_words)
  return key_words.join("_") if files.size == 0
  return files.first if files.size == 1
  puts
  files.each_with_index do |file, i|
    puts "[#{i}] #{file}"
  end
  puts
  unless option
    print "[index|keywords] "
    option = $stdin.gets.chomp
  end  
  if num?(option)
    files[option.to_i] 
  elsif option == "q"
    abort
  else
    show_and_get_file(files, option.split(" "))
  end
end

def parse_link(link)
  link = link.split("](")[1].gsub(')','')
  link.split(" ").select{|x| x.start_with?("http") || x.start_with?("/")}.first
rescue
  abort "link parse failure: #{link}"
end

def image_link_2?(line)
  line.include?("<img src=")
end

def image_link?(line)
  !/\[*\]/.match(line).nil? && line.strip.start_with?("!")
end

def is_link?(line)
  !/\[*\]/.match(line).nil? && !line.strip.start_with?("!")
end

def links(file)
  links = File.open(file, "r").select do |line|
    is_link? line
  end
  puts
  links.each_with_index do |link, i|
    puts "[#{i}] #{link.split("](").first.gsub('[','')}"
  end
  print "[which? none:q] "
  opt = $stdin.gets.chomp.downcase
  abort if opt == "q"

  link = parse_link(links[opt.to_i])
  link ||= links[opt.to_i]
  if link.include?("http")
    system "open #{link}"
  else
    target = "#{DOC_SHELF}/#{link}.md"
    if File.exist?(target)
      edit target
    else
      puts "\ninvalid link: #{target}\n\n"
    end
  end
end

def all_files
  Dir["#{DOC_SHELF}/*"].map{|file| File.basename(file).gsub(".md","")}
end

def mkdir_docshelfs
  system "mkdir -p #{DOC_SHELF}/images"
  system "mkdir -p #{DOC_SHELF_P}/images"
end

def image_path(root, name, extension)
  "#{root}/images/#{name}.#{extension}".gsub("//","/")
end

def copy(from, to)
  system "cp #{from} #{to}"
end

def extract_files(files)
  files.select{|file| File.exist?(file)}
end

def stop(message, cond)
  abort message if cond
end

def inter(message)
  print message
  $stdin.gets.chomp
end

def set_image
  name = inter "[name:] "  
  stop "you need name", !name 
  files = extract_files(key_words)
  stop "you need image file.", files.size == 0
  file = files.first
  ARGV.delete(file)
  extension = file.split(".").last

  mkdir_docshelfs 

  target  = image_path(DOC_SHELF_P, name, extension)

  if File.exist!(target)
    target = "#{Time.now.to_f.to_i}_" + target
    name   = "#{Time.now.to_f.to_i}_" + name
  end

  copy file, target
  copy target, image_path(DOC_SHELF, name, extension)

  #markdown = "<img src=\"#{target}\" width=152>"
  markdown = "![image](#{target})"
  system("echo \"#{markdown}\" | pbcopy")
  puts "\n#{markdown}\n\n"
end  

def update_wiki
  do_convert
  system "cd #{ROOT};git add #{ROOT};git commit -m \"page updated\";git push origin master"
end

def do_convert
  Dir["#{DOC_SHELF}/*"].each do |file|
    convert(file) if File.file?(file)
  end
end

case options.first
when "-u"
  update_wiki
when "-h", "--help"
  puts
  puts "#{APP_NAME} -n [word] ... make new article"
  puts "#{APP_NAME} [word]    ... edit article"
  puts "#{APP_NAME} -d [word] ... remove article"
  puts "#{APP_NAME} -c        ... convert"
  puts "#{APP_NAME} -u        ... update web page"
  puts "#{APP_NAME} -i [image file path] ... add image rsc and markdown to the clipboard"
  puts
when "-d" 
  term = show_and_get_file(all_files, key_words)
  print "okay to delete [#{term}] ? [Y/n]: "
  system("rm #{DOC_SHELF}/#{term}.md") if $stdin.gets.chomp.downcase == "y"
when "-i" # image
  set_image
when "-c"  
  do_convert
else
  system("mkdir -p #{DOC_SHELF}") unless File.directory?(DOC_SHELF)
  file_name = "#{DOC_SHELF}/#{key_words.join('_')}.md"
  if options.include?("-n") || File.exist?(file_name)
    edit(file_name)
  else
    edit "#{DOC_SHELF}/#{show_and_get_file(all_files, key_words)}.md"
  end  
end




